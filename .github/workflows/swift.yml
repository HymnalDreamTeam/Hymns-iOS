name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Generate XCode Proj 
      run: |
        swift package init --type library
        swift package generate-xcodeproj
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
      
# CI Testing that actually works!
# (1) While we can actually do both the build and test step in one wiht "xcodebuild test", it is slower and ends up with a very hard to read 3000 line report. So it is faster to break it up into two steps. Build and test. Also, useful if we choose to have more than one kind of test.
# (2) Very important to know that -testPlan is a flag that uses an xCode test plan of choice. Only necessary if we are going to use testplans.
    - name: Build for WorkingTesting
      run: xcodebuild build-for-testing -workspace Hymns.xcodeproj -scheme Hymns -destination "platform=iOS Simulator,name=iPhone 11 Pro"
    - name: Start WorkingTesting
      run: xcodebuild test-without-building -workspace Hymns.xcodeproj -scheme Hymns -destination "platform=iOS Simulator,name=iPhone 11 Pro" -testPlan MasterTestPlan

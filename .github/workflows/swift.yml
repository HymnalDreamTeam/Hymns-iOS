name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    # https://medium.com/xcblog/xcodebuild-deploy-ios-app-from-command-line-c6defff0d8b8
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: |
        pod deintegrate
        pod install
    - name: Generate Mockingbird Mocks
      run: Pods/MockingbirdFramework/mockingbird generate --targets 'Hymns'  --outputs 'MockingbirdMocks/HymnsMocks.generated.swift' --disable-swiftlint
    # While we can actually do both the build and test step in one with "xcodebuild test", it is slower and ends up with a very hard to read 3000 line report.
    # So it is faster to break it up into two steps. Build and test. Also, useful if we choose to have more than one kind of test.
    - name: Build for Testing
      run: xcodebuild build-for-testing -workspace Hymns.xcworkspace -scheme Hymns -destination "platform=iOS Simulator,name=iPhone 11 Pro"
    # Very important to know that -testPlan is a flag that uses an xCode test plan of choice. Only necessary if we are going to use testplans.
    - name: Test with MasterTestPlan
      run: xcodebuild test-without-building -workspace Hymns.xcworkspace -scheme Hymns -destination "platform=iOS Simulator,name=iPhone 11 Pro" -testPlan MasterTestPlan -enableCodeCoverage YES
    # Upload artifacts
    - uses: actions/upload-artifact@v2
      with:
        name: Test Logs
        path: /Users/runner/Library/Developer/Xcode/DerivedData/Hymns-*/Logs
